{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nconst numRows = 25;\nconst numCols = 25;\nconst operations = [[0, 1], [0, -1], [1, -1], [1, 0], [1, 1], [-1, -1], [-1, 0][(-1, 1)]]; //these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)); //0 means dead, 1 means alive\n    }\n\n    return rows;\n  });\n  console.log(grid);\n  const [running, setRunning] = useState(false); //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n\n            if (gridCopy[i][k + 1] === 1) {\n              neighbors += 1;\n            }\n          }\n        }\n      });\n    }); // simulate\n\n    setTimeout(runSimulation, 1000); //setTimeout\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, running ? 'Stop' : 'Start'), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${k}`,\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: grid[i][k] ? \"pink\" : undefined,\n      border: \"solid 1px black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js"],"names":["React","useState","useCallback","useRef","produce","numRows","numCols","operations","App","grid","setGrid","rows","i","push","Array","from","console","log","running","setRunning","runningRef","current","runSimulation","g","gridCopy","k","neighbors","setTimeout","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nconst numRows = 25;\nconst numCols = 25;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [1, 0],\n  [1,1],\n  [-1, -1],\n  [-1, 0]\n  [-1, 1],\n];\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)) \n      //0 means dead, 1 means alive\n    }\n    return rows\n  });\n\n  console.log(grid);\n\n  const [running, setRunning] = useState(false);\n  //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } \n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    setGrid((g) => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            if (gridCopy[i][k+1] === 1) {\n              neighbors += 1;\n            }\n          }\n        }\n      });\n    });\n    \n    // simulate\n    setTimeout(runSimulation, 1000);\n    //setTimeout\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>John Conway's Game of Life</h1>\n      </header>\n      {/* <Grid \n      /> */}\n      {/* <h2>Generations: {this.state.generation}</h2> */}\n      <button \n        onClick={() => { \n          setRunning(!running);\n        }}\n      >\n        {running ? 'Stop' : 'Start' }\n      </button>\n      <div \n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) => \n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                })\n                setGrid(newGrid)\n              }}\n              style ={{ \n                width: 20, \n                height: 20, \n                backgroundColor: grid[i][k] ? \"pink\" : undefined, \n                border: \"solid 1px black\"\n              }} \n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}