{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations'; //these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst operations = [[-1, 0], [-1, 1], [-1, -1], [0, 1], [0, -1], [1, 1], [1, 0], [1, -1]]; // let Toad = require('../../assets/Game_of_life_toad.gif');\n\nconst presets = [{\n  name: \"Toad\",\n  matrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n  startingPoint: 0\n}, {\n  name: \"Glider\",\n  matrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n  startingPoint: [1, 1]\n}, {\n  name: \"Quad Blinker\",\n  matrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n  startingPoint: 0\n}]; //generate initial empty grid with equal number of rows/columns\n\nconst generateEmptyGrid = numRows => {\n  const rows = []; //array of rows\n\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n\n    for (let k = 0; k < numRows; k++) {\n      row.push(0); //row of zeros\n    }\n\n    rows.push(row); //add initialized rows onto rows array\n    //0 means dead, 1 means alive\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [numRows, setNumRows] = useState(25);\n  const [grid, setGrid] = useState(generateEmptyGrid(numRows));\n  const [generation, setGeneration] = useState(0);\n  const [speed, setSpeed] = useState(1000);\n  const [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n\n  const [previous, setPrevious] = useState(); //this will allow 'running' to continue and not change its value unless intended\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const speedRef = useRef(speed);\n  speedRef.current = speed;\n  console.log(grid);\n  useEffect(() => {\n    setGrid(generateEmptyGrid(numRows));\n  }, [numRows]);\n  useEffect(() => {\n    speedRef.current = speed;\n  }, [speed]);\n\n  const clearGrid = () => {\n    setGrid(generateEmptyGrid(numRows));\n    setGeneration(0);\n  };\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    // simulate\n\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numRows; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newRow = i + x;\n              const newCol = k + y; // check the bounds to make sure it can't go farther than the grid boundaries\n\n              if (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n                neighbors += g[newRow][newCol];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(g => g + 1); //counts the generations\n\n    setTimeout(runSimulation, speedRef.current); //setTimeout for seconds between iterations\n  }, []);\n\n  const createPresetGrid = (matrix, startingPoint) => {\n    let row;\n    let col;\n\n    if (!startingPoint) {\n      const mid = Math.floor(numRows / 2);\n      row = mid;\n      col = mid;\n    } else {\n      row = startingPoint[0];\n      col = startingPoint[1];\n    }\n\n    clearGrid();\n    setGrid(g => produce(g, presetGrid => {\n      matrix.forEach(([x, y]) => {\n        const newRow = row + x;\n        const newCol = col + y;\n        presetGrid[newRow][newCol] = 1;\n      });\n      return presetGrid;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 8\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-grid-and-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 8\n    }\n  }, \"Generation: \", generation), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 8\n    }\n  }, \"Speed: \", speed), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 8\n    }\n  }, \"Grid Size: \", numRows, \" x \", numRows)), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    running: running,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(GameControls, {\n    setGrid: setGrid,\n    runSimulation: runSimulation,\n    clearGrid: clearGrid,\n    running: running,\n    setRunning: setRunning,\n    runningRef: runningRef,\n    numRows: numRows,\n    setNumRows: setNumRows,\n    generation: generation,\n    setGeneration: setGeneration,\n    speed: speed,\n    setSpeed: setSpeed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-rules-and-presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rules-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, \"Rules\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, \"Any live cell with two or three live neighbors survives.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, \"Any dead cell with three live neighbors becomes a live cell.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, \"All other live cells die in the next generation. Similarly, all other dead cells remain dead.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, \"Presets\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \"Click on one of the common configurations below to start the game with a preset. How many generations will it last?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, presets.map(preset => {\n    return /*#__PURE__*/React.createElement(PresetConfigurations, Object.assign({\n      key: presets.name,\n      key: presets.img\n    }, preset, {\n      numRows: numRows,\n      clearGrid: clearGrid,\n      createPresetGrid: createPresetGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 16\n      }\n    }));\n  })))))) //end div for App\n  ;\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js"],"names":["React","useState","useEffect","useCallback","useRef","produce","Grid","GameControls","PresetConfigurations","operations","presets","name","matrix","startingPoint","generateEmptyGrid","numRows","rows","i","row","k","push","App","setNumRows","grid","setGrid","generation","setGeneration","speed","setSpeed","running","setRunning","previous","setPrevious","runningRef","current","speedRef","console","log","clearGrid","runSimulation","g","gridCopy","neighbors","forEach","x","y","newRow","newCol","setTimeout","createPresetGrid","col","mid","Math","floor","presetGrid","map","preset","img"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations';\n\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\nconst operations = [\n\t[-1, 0],\n\t[-1, 1],\n\t[-1, -1],\n\t[0, 1],\n\t[0, -1],\n\t[1, 1],\n\t[1, 0],\n\t[1, -1],\n];\n\n// let Toad = require('../../assets/Game_of_life_toad.gif');\n\nconst presets = [\n\t{\n\t\tname: \"Toad\",\n\t\tmatrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n\t\tstartingPoint: 0,\n  \t},\n\t{\n\t\tname: \"Glider\",\n\t\tmatrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n\t\tstartingPoint: [1, 1],\n\t},\n\t{\n\t\tname: \"Quad Blinker\",\n\t\tmatrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n\t\tstartingPoint: 0,\n\t},\n];\n\n//generate initial empty grid with equal number of rows/columns\nconst generateEmptyGrid = numRows => {\n\tconst rows = []; //array of rows\n\tfor (let i = 0; i < numRows; i++) {\n\t\tconst row = [];\n\t\tfor (let k = 0; k < numRows; k++) {\n      \t\trow.push(0) //row of zeros\n    \t}\n    \trows.push(row); //add initialized rows onto rows array\n    \t//0 means dead, 1 means alive\n  \t}\n\n  \treturn rows;\n};\n\nfunction App() {\n\tconst [numRows, setNumRows] = useState(25);\n\tconst [grid, setGrid] = useState(generateEmptyGrid(numRows));\n\tconst [generation, setGeneration] = useState(0);\n\tconst [speed, setSpeed] = useState(1000);\n\tconst [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n\tconst [previous, setPrevious] = useState()\n\n\t//this will allow 'running' to continue and not change its value unless intended\n\tconst runningRef = useRef(running);\n\trunningRef.current = running\n\n\tconst speedRef = useRef(speed);\n\tspeedRef.current = speed;\n\n\tconsole.log(grid);\n\n\tuseEffect(() => {\n\t\tsetGrid(generateEmptyGrid(numRows))\n\t}, [numRows])\n\n  \tuseEffect(() => {\n    \tspeedRef.current = speed;\n  \t}, [speed])\n\n  \tconst clearGrid = () => {\n    \tsetGrid(generateEmptyGrid(numRows))\n    \tsetGeneration(0)\n  \t}\n\n\n  \tconst runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    \tif (!runningRef.current) {\n      \treturn;\n    \t}\n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n\n    // simulate\n\t\tsetGrid(g => {\n\t\t\treturn produce(g, gridCopy => {\n        \t\tfor (let i = 0; i < numRows; i++) {\n        \t\t\tfor (let k = 0; k < numRows; k++) {\n\t\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\t\toperations.forEach(([x, y]) => {\n            \t\t\t\tconst newRow = i + x;\n            \t\t\t\tconst newCol = k + y;\n              \t\t\t\t// check the bounds to make sure it can't go farther than the grid boundaries\n              \t\t\t\tif (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n                \t\t\t\tneighbors += g[newRow][newCol];\n              \t\t\t\t}\n        \t\t\t\t});\n\n            \t\t\tif (neighbors < 2 || neighbors > 3) {\n              \t\t\t\tgridCopy[i][k] = 0;\n            \t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n              \t\t\t\tgridCopy[i][k] = 1;\n            \t\t\t}\n          \t\t\t}\n        \t\t}\n      \t\t});\n    \t});\n\n\t\tsetGeneration(g => g + 1); //counts the generations\n    \tsetTimeout(runSimulation, speedRef.current);  //setTimeout for seconds between iterations\n  \t}, []);\n\n\tconst createPresetGrid = (matrix, startingPoint) => {\n    \tlet row;\n    \tlet col;\n    \tif (!startingPoint) {\n      \t\tconst mid = Math.floor(numRows / 2);\n      \t\trow = mid;\n      \t\tcol = mid;\n    \t}\n    \telse {\n      \t\trow = startingPoint[0];\n      \t\tcol = startingPoint[1];\n    \t}\n\n    \tclearGrid();\n\t\tsetGrid(g => produce(g, presetGrid => {\n      \t\tmatrix.forEach(([x, y]) => {\n        \t\tconst newRow = row + x;\n        \t\tconst newCol = col + y;\n        \t\tpresetGrid[newRow][newCol] = 1;\n      \t\t})\n\n      \treturn presetGrid;\n    \t}));\n  \t}\n\n\treturn (\n\t\t<div className=\"App\">\n    \t\t<header className=\"App-header\">\n    \t\t\t<h1>John Conway's Game of Life</h1>\n      \t\t</header>\n      \t\t<main>\n        \t\t<div className=\"left-grid-and-controls\">\n\t\t\t\t\t<div className=\"grid-card\">\n\t\t\t\t\t\t<div className=\"settings\">\n\t\t\t\t\t\t\t<h3>Generation: {generation}</h3>\n\t\t\t\t\t\t\t<h3>Speed: {speed}</h3>\n\t\t\t\t\t\t\t<h3>Grid Size: {numRows} x {numRows}</h3>\n          \t\t\t\t</div>\n\t\t\t\t\t\t<Grid \n\t\t\t\t\t\t\tgrid={grid} \n\t\t\t\t\t  \t\tsetGrid={setGrid} \n\t\t\t\t\t  \t\trunning={running} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<GameControls\n\t\t\t\t\t\tsetGrid={setGrid}\n\t\t\t\t\t\trunSimulation={runSimulation}\n\t\t\t\t\t\tclearGrid={clearGrid}\n\t\t\t\t\t\trunning={running}\n\t\t\t\t\t\tsetRunning={setRunning}\n\t\t\t\t\t\trunningRef={runningRef}\n\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\tsetNumRows={setNumRows}\n\t\t\t\t\t\tgeneration={generation}\n\t\t\t\t\t\tsetGeneration={setGeneration}\n\t\t\t\t\t\tspeed={speed}\n\t\t\t\t\t\tsetSpeed={setSpeed}\n\t\t\t\t\t/>\n        \t\t</div>\n\t\t\t\t<div className=\"right-rules-and-presets\">\n\t\t\t\t\t<div className=\"rules-section\">\n\t\t\t\t\t\t<h2>Rules</h2>\n\t\t\t\t\t\t<p>Any live cell with two or three live neighbors survives.</p>\n\t\t\t\t\t\t<p>Any dead cell with three live neighbors becomes a live cell.</p>\n\t\t\t\t\t\t<p>All other live cells die in the next generation. Similarly, all other dead cells remain dead.</p>\n\t\t\t\t\t</div>\n        \t\t\t<div className=\"presets-section\">\n\t\t\t\t\t\t<h2>Presets</h2>\n\t\t\t\t\t\t<p>Click on one of the common configurations below to start the game with a preset. How many generations will it last?</p>\n\t\t\t\t\t\t<div className=\"presets-list\">\n\t\t\t\t\t\t\t{presets.map(preset => {\n\t\t\t\t\t\t\t\treturn <PresetConfigurations\n\t\t\t\t\t\t\t\t\tkey={presets.name}\n\t\t\t\t\t\t\t\t\tkey={presets.img}\n\t\t\t\t\t\t\t\t\t{...preset}\n\t\t\t\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\t\t\t\tclearGrid={clearGrid}\n\t\t\t\t\t\t\t\t\tcreatePresetGrid={createPresetGrid}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n        \t\t\t</div>\n\t\t\t\t</div>\n      \t\t</main>\n    \t</div> //end div for App\n  \t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}