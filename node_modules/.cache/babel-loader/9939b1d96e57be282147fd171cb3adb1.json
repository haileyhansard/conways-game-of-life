{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nimport Grid from './Grid';\nimport { presets } from './PresetConfigurations';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations';\nconst numRows = 25;\nconst numCols = 25;\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]]; //these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n\n    for (let k = 0; k < numCols; k++) {\n      row.push(0);\n    }\n\n    rows.push(row); //0 means dead, 1 means alive\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  console.log(grid);\n  const [running, setRunning] = useState(false); //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    // simulate\n\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y; // check the bounds to make sure it can't go farther than the grid boundaries\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100); //setTimeout for seconds between iterations\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      const rows = [];\n\n      for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n      }\n\n      setGrid(rows);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \" Randomize\"), /*#__PURE__*/React.createElement(GameControls, {\n    setRunning: setRunning,\n    running: running,\n    running: runningRef,\n    runSimulation: runSimulation,\n    generateEmptyGrid: generateEmptyGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Generations: \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"Rules\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Any live cell with two or three live neighbors survives.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"Any dead cell with three live neighbors becomes a live cell.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"All other live cells die in the next generation. Similarly, all other dead cells remain dead.\")));\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js"],"names":["React","useState","useCallback","useRef","produce","Grid","presets","GameControls","PresetConfigurations","numRows","numCols","operations","generateEmptyGrid","rows","i","row","k","push","App","grid","setGrid","console","log","running","setRunning","runningRef","current","runSimulation","g","gridCopy","neighbors","forEach","x","y","newI","newK","setTimeout","Array","from","Math","random"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nimport Grid from './Grid';\nimport {presets} from './PresetConfigurations';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations';\n\nconst numRows = 25;\nconst numCols = 25;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1,1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let k = 0; k < numCols; k++) {\n      row.push(0)\n    }\n    rows.push(row);\n    //0 means dead, 1 means alive\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  console.log(grid);\n\n  const [running, setRunning] = useState(false);\n  //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running\n\n  \n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } \n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    \n    // simulate\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              // check the bounds to make sure it can't go farther than the grid boundaries\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    \n    setTimeout(runSimulation, 100);\n    //setTimeout for seconds between iterations\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>John Conway's Game of Life</h1>\n      </header>\n      <Grid />\n      \n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n              );\n            }\n            \n            setGrid(rows);\n          }}\n          > Randomize\n      </button>\n      \n      \n      <GameControls \n        setRunning={setRunning}\n        running={running}\n        running={runningRef}\n        runSimulation={runSimulation}\n        generateEmptyGrid={generateEmptyGrid}\n      />\n      {/* <div className=\"presets\">\n        <h2>Presets</h2>\n        <div className=\"presets-list\">\n          {presets.map(preset => {\n            return <PresetConfigurations \n            key={preset.name}\n            {...preset}\n            {}\n\n          })}\n        </div>\n\n      </div> */}\n\n      <h2>Generations: {}</h2>\n      <h2>Rules</h2>\n      <ul>\n        <li>Any live cell with two or three live neighbors survives.</li>\n        <li>Any dead cell with three live neighbors becomes a live cell.</li>\n        <li>All other live cells die in the next generation. Similarly, all other dead cells remain dead.</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}