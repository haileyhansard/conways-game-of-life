{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js\";\nimport React, { useState, useCallback } from 'react';\nimport produce from 'immer';\nimport './App.css';\nconst numRows = 25;\nconst numCols = 25;\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)); //0 means dead, 1 means alive\n    }\n\n    return rows;\n  });\n  console.log(grid);\n  const [running, setRunning] = useState(false); //when button is clicked, running is toggled on and off\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!running) {\n      return;\n    } //whenever this is false, it will die, our kill condition for the recursive function\n    // simulate\n\n\n    setTimeout; //setTimeout\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, running ? 'Stop' : 'Start'), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${k}`,\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: grid[i][k] ? \"pink\" : undefined,\n      border: \"solid 1px black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js"],"names":["React","useState","useCallback","produce","numRows","numCols","App","grid","setGrid","rows","i","push","Array","from","console","log","running","setRunning","runSimulation","setTimeout","display","gridTemplateColumns","map","col","k","newGrid","gridCopy","width","height","backgroundColor","undefined","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAO,WAAP;AAEA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,MAAM;AACrC,UAAMQ,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAApB,EAA6BM,CAAC,EAA9B,EAAkC;AAChCD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,OAAD,CAAhB,EAA2B,MAAM,CAAjC,CAAV,EADgC,CAEhC;AACD;;AACD,WAAOI,IAAP;AACD,GAP+B,CAAhC;AASAK,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AAEA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAZa,CAab;;AAEA,QAAMiB,aAAa,GAAGhB,WAAW,CAAC,MAAM;AACtC;AACA,QAAI,CAACc,OAAL,EAAc;AACZ;AACD,KAJqC,CAIpC;AACF;;;AACAG,IAAAA,UAAU,CAN4B,CAOtC;AAED,GATgC,EAS9B,EAT8B,CAAjC;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,CADF,eAOE;AACE,IAAA,OAAO,EAAE,MAAM;AACbF,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,OAAO,GAAG,MAAH,GAAY,OALtB,CAPF,eAcE;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,mBAAmB,EAAG,UAAShB,OAAQ;AAFlC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGE,IAAI,CAACe,GAAL,CAAS,CAACb,IAAD,EAAOC,CAAP,KACRD,IAAI,CAACa,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,kBACP;AACE,IAAA,GAAG,EAAG,GAAEd,CAAE,IAAGc,CAAE,EADjB;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,YAAMC,OAAO,GAAGtB,OAAO,CAACI,IAAD,EAAOmB,QAAQ,IAAI;AACxCA,QAAAA,QAAQ,CAAChB,CAAD,CAAR,CAAYc,CAAZ,IAAiBjB,IAAI,CAACG,CAAD,CAAJ,CAAQc,CAAR,IAAa,CAAb,GAAiB,CAAlC;AACD,OAFsB,CAAvB;AAGAhB,MAAAA,OAAO,CAACiB,OAAD,CAAP;AACD,KAPH;AAQE,IAAA,KAAK,EAAG;AACNE,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,eAAe,EAAEtB,IAAI,CAACG,CAAD,CAAJ,CAAQc,CAAR,IAAa,MAAb,GAAsBM,SAHjC;AAINC,MAAAA,MAAM,EAAE;AAJF,KARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CANH,CAdF,CADF;AA2CD;;AAED,eAAezB,GAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nconst numRows = 25;\nconst numCols = 25;\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)) \n      //0 means dead, 1 means alive\n    }\n    return rows\n  });\n\n  console.log(grid);\n\n  const [running, setRunning] = useState(false);\n  //when button is clicked, running is toggled on and off\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!running) {\n      return;\n    } //whenever this is false, it will die, our kill condition for the recursive function\n    // simulate\n    setTimeout\n    //setTimeout\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>John Conway's Game of Life</h1>\n      </header>\n      {/* <Grid \n      /> */}\n      {/* <h2>Generations: {this.state.generation}</h2> */}\n      <button \n        onClick={() => { \n          setRunning(!running);\n        }}\n      >\n        {running ? 'Stop' : 'Start' }\n      </button>\n      <div \n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) => \n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                })\n                setGrid(newGrid)\n              }}\n              style ={{ \n                width: 20, \n                height: 20, \n                backgroundColor: grid[i][k] ? \"pink\" : undefined, \n                border: \"solid 1px black\"\n              }} \n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}