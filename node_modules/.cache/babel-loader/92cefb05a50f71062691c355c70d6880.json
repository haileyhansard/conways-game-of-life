{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nconst numRows = 50;\nconst numCols = 50;\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]]; //these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Arry.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)); //0 means dead, 1 means alive\n    }\n\n    return rows;\n  });\n  console.log(grid);\n  const [running, setRunning] = useState(false); //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    // simulate\n\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y; // check the bounds to make sure it can't go farther than the grid boundaries\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 1000); //setTimeout for seconds between iterations\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n\n      if (!running) {\n        runningRef.current = true;\n        runSimulation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, running ? 'Stop' : 'Start'), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${k}`,\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: grid[i][k] ? \"pink\" : undefined,\n      border: \"solid 1px black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/App.js"],"names":["React","useState","useCallback","useRef","produce","numRows","numCols","operations","generateEmptyGrid","rows","i","push","Arry","from","Array","App","grid","setGrid","console","log","running","setRunning","runningRef","current","runSimulation","g","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1,1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Arry.from(Array(numCols), () => 0));\n  }\n\n  return rows\n}\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0)); \n      //0 means dead, 1 means alive\n    }\n    return rows\n  });\n\n  console.log(grid);\n\n  const [running, setRunning] = useState(false);\n  //when button is clicked, running is toggled on and off\n\n  const runningRef = useRef(running);\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } \n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    \n    // simulate\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              // check the bounds to make sure it can't go farther than the grid boundaries\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    \n    setTimeout(runSimulation, 1000);\n    //setTimeout for seconds between iterations\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>John Conway's Game of Life</h1>\n      </header>\n      {/* <Grid \n      /> */}\n      {/* <h2>Generations: {this.state.generation}</h2> */}\n      <button \n        onClick={() => { \n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? 'Stop' : 'Start' }\n      </button>\n      <div \n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) => \n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style ={{ \n                width: 20, \n                height: 20, \n                backgroundColor: grid[i][k] ? \"pink\" : undefined, \n                border: \"solid 1px black\"\n              }} \n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}