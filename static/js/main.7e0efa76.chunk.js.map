{"version":3,"sources":["Components/Grid.js","Components/GameControls.js","Components/MainButtons.js","Components/PresetConfigurations.js","Components/App.js","index.js"],"names":["Grid","grid","setGrid","running","className","map","row","i1","key","col","i2","onClick","rowIndex","colIndex","g","produce","gridCopy","GameControls","props","numRows","setNumRows","setGeneration","speed","setSpeed","disabled","MainButtons","runSimulation","clearGrid","setRunning","runningRef","current","rows","i","k","push","Math","random","PresetConfigurations","name","matrix","startingPoint","createPresetGrid","operations","presets","generateEmptyGrid","App","useState","generation","useRef","speedRef","console","log","useEffect","checkNeighbors","useCallback","neighbors","forEach","x","y","newRow","newCol","setTimeout","mid","floor","presetGrid","toFixed","preset","src","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e0efa76.chunk.js","sourcesContent":["import React from 'react';\nimport produce from 'immer';\n\n\nconst Grid = ({ grid, setGrid, running }) => {\n\n    const activateColor = (rowIndex, colIndex) => {    \n      setGrid(g => {\n        return produce(g, gridCopy => {\n          gridCopy[rowIndex][colIndex]\n        ? gridCopy[rowIndex][colIndex] = 0\n        : gridCopy[rowIndex][colIndex] = 1;\n        })\n      })\n      // setGrid(() => {\n      //   const gridCopy = grid.map(row => [...row]);\n      //   gridCopy[rowIndex][colIndex] = gridCopy[rowIndex][colIndex] ? 0 : 1;\n      //   return gridCopy;\n      // })\n    }\n  \n    return (\n      <div className=\"grid\">\n        {grid.map((row, i1) => (\n          <div key={'row' + i1} className=\"row\">\n            {row.map((col, i2) => (\n              <div \n                key={'col' + i2}\n                className={col ? \"cell alive\" : \"cell\"} \n                onClick={running ? null : () => activateColor(i1, i2)} \n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n};\n\nexport default Grid;","import React from 'react';\n\nconst GameControls = props => {\n    const {\n        running,\n        numRows,\n        setNumRows,\n        setGeneration,\n        speed,\n        setSpeed,\n    } = props;\n\n    const increaseSize = () => {\n        if (numRows < 40) setNumRows(numRows + 5)\n        setGeneration(0)\n    }\n\n    const decreaseSize = () => {\n        if (numRows > 20) setNumRows(numRows - 5)\n        setGeneration(0)\n    }\n\n    const slower = () => {\n        if (speed < 4000) setSpeed(speed + 300)\n    }\n\n    const faster = () => {\n        if (speed > 300) setSpeed(speed - 300)\n    }\n\n    return (\n        <div className=\"game-controls\">\n            <div className=\"control-buttons\">\n                <button onClick={slower}>- Speed</button>\n                <button onClick={faster}>+ Speed</button>\n                <button disabled={running} onClick={decreaseSize}> - Size</button>\n                <button disabled={running} onClick={increaseSize}>+ Size</button>\n            </div>\n        </div>\n    )\n}\n\nexport default GameControls;","import React from 'react';\n\nconst MainButtons = props => {\n    const {\n        runSimulation,\n        clearGrid,\n        setGrid,\n        running,\n        setRunning,\n        runningRef,\n        numRows,\n    } = props;\n\n    return (\n        <div className=\"main-buttons\">\n            <div className=\"first-set-buttons\">\n                <button \n                    onClick={() => { \n                        setRunning(!running);\n                        if (!running) {\n                        runningRef.current = true;\n                        runSimulation()\n                        }\n                    }}\n                >\n                    {running ? 'Stop' : 'Start!' }\n                </button>\n                \n                <button onClick={() => clearGrid()}>Clear Grid</button>\n                \n                <button\n                    onClick={() => {\n                        const rows = [];\n                        for (let i = 0; i < numRows; i++) {\n                            const row =[]\n                            for (let k = 0; k < numRows; k++) {\n                                row.push(Math.random() > 0.7 ? 1 : 0)\n                            } //70% chance of getting a 0\n                            rows.push(row)\n                        }\n                        setGrid(rows);\n                    }}\n                > \n                    Randomize!\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default MainButtons;","\nimport React from 'react';\n\n const PresetConfigurations = ({name, matrix, startingPoint, createPresetGrid}) => {\n  return (\n    <div className=\"each-preset\" onClick={() => createPresetGrid(matrix, startingPoint)}>\n      {name}\n    </div>\n  );\n }; \n\nexport default PresetConfigurations;\n\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport MainButtons from './MainButtons';\nimport PresetConfigurations from './PresetConfigurations';\n\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n//each operation represents a cell location \nconst operations = [\n\t[-1, 0],\n\t[-1, 1],\n\t[-1, -1],\n\t[0, 1],\n\t[0, -1],\n\t[1, 1],\n\t[1, 0],\n\t[1, -1],\n];\n\nconst presets = [\n\t{\n\t\tname: \"Toad\",\n\t\tmatrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n\t\tstartingPoint: 0,\n  \t},\n\t{\n\t\tname: \"Glider\",\n\t\tmatrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n\t\tstartingPoint: [1, 1],\n\t},\n\t{\n\t\tname: \"Quad Blinker\",\n\t\tmatrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n\t\tstartingPoint: 0,\n\t},\n\t{\n\t\tname: \"Spaceship\",\n\t\tmatrix: [[-1, 0],[-2, -1],[-2, -2],[-1, -2],[0, -2],\n\t\t\t[-3, -8],[-4, -8],[-4, -9],[-3, -10],[-2, -10],[-2, -9],\n\t\t\t[-3, -17],[-3, -18],[-4, -17],[-4, -18],\n\t\t\t[-4, 4],[-4, 5],[-5, 4],[-5, 6],[-6, 5],[-6, 6],\n\t\t\t[-5, 16],[-5, 17],[-6, 16],[-6, 17],\n\t\t\t[6, 6],[6, 7],[6, 8],[7, 6],[8, 7],\n\t\t\t[1, 17],[2, 17],[3, 17],[1,18],[2,19]],\n\t\tstartingPoint: 0,\n\t}\n];\n\n//generate initial empty grid with equal number of rows/columns\nconst generateEmptyGrid = numRows => {\n\tconst rows = []; //array of rows\n\tfor (let i = 0; i < numRows; i++) {\n\t\tconst row = [];\n\t\tfor (let k = 0; k < numRows; k++) {\n      \t\trow.push(0) //row of zeros\n    \t}\n    \trows.push(row); //add initialized rows onto rows array\n    \t//0 means dead, 1 means alive\n  \t}\n\n  \treturn rows;\n};\n\nfunction App() {\n\tconst [numRows, setNumRows] = useState(25);\n\tconst [grid, setGrid] = useState(generateEmptyGrid(numRows));\n\tconst [generation, setGeneration] = useState(0);\n\tconst [speed, setSpeed] = useState(1000);\n\tconst [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n\n\t//this will allow 'running' to continue and not change its value unless intended\n\tconst runningRef = useRef(running);\n\trunningRef.current = running\n\n\tconst speedRef = useRef(speed);\n\tspeedRef.current = speed;\n\n\tconsole.log(grid);\n\n\tuseEffect(() => {\n\t\tsetGrid(generateEmptyGrid(numRows))\n\t}, [numRows])\n\n  \tuseEffect(() => {\n    \tspeedRef.current = speed;\n  \t}, [speed])\n\n  \tconst clearGrid = () => {\n    \tsetGrid(generateEmptyGrid(numRows));\n\t\tsetGeneration(0);\n\t\tsetRunning(false);\n\t\tsetSpeed(1000);\n  \t}\n\t\n\t  //function that checks the position of the neighboring cells to determine how many neighbors surround a live cell, using npm package immer with keyword 'produce' to give us access to current grid and a new copy of the grid that is being changed.\n\tconst checkNeighbors = useCallback(g => {\n\t\treturn produce(g, gridCopy => {\n        \tfor (let i = 0; i < numRows; i++) {\n        \t\tfor (let k = 0; k < numRows; k++) {\n\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\toperations.forEach(([x, y]) => {\n        \t\t\t\tconst newRow = i + x;\n        \t\t\t\tconst newCol = k + y;\n          \t\t\t\t// check the bounds to make sure it can't go farther than the grid boundaries\n          \t\t\t\tif (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n            \t\t\t\tneighbors += g[newRow][newCol];\n          \t\t\t\t}\n        \t\t\t});\n\n        \t\t\tif (neighbors < 2 || neighbors > 3) {\n          \t\t\t\tgridCopy[i][k] = 0;\n        \t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n          \t\t\t\tgridCopy[i][k] = 1;\n        \t\t\t}\n        \t\t}\n        \t}\n      \t});\n\t}, [numRows])\n\t\n\n  \tconst runSimulation = useCallback(() => {\n    // determine if not currently running, then return\n\t// whenever this is false, it will die, our kill condition for the recursive function\n    \tif (!runningRef.current) {\n      \treturn;\n    \t}\n\n    // simulate the game by checking the neighboring cells\n\t\tsetGrid(checkNeighbors);\n\n\t\tsetGeneration(g => g + 1); //counts the generations\n    \tsetTimeout(runSimulation, speedRef.current);  //setTimeout for seconds between iterations\n  \t}, [checkNeighbors]);\n\n\tconst createPresetGrid = (matrix, startingPoint) => {\n    \tlet row;\n    \tlet col;\n    \tif (!startingPoint) {\n      \t\tconst mid = Math.floor(numRows / 2);\n      \t\trow = mid;\n      \t\tcol = mid;\n    \t} else {\n      \t\trow = startingPoint[0];\n      \t\tcol = startingPoint[1];\n    \t}\n    \tclearGrid();\n\t\tsetGrid(g => produce(g, presetGrid => {\n      \t\tmatrix.forEach(([x, y]) => {\n        \t\tconst newRow = row + x;\n        \t\tconst newCol = col + y;\n        \t\tpresetGrid[newRow][newCol] = 1;\n      \t\t});\n      \t\treturn presetGrid;\n    \t}));\n  \t}\n\n\treturn (\n\t\t<div className=\"App\">\n    \t\t<header className=\"App-header\">\n    \t\t\t<h1>John Conway's Game of Life</h1>\n      \t\t</header>\n      \t\t<main>\n        \t\t<div className=\"left-grid-and-controls\">\n\t\t\t\t\t<MainButtons \n\t\t\t\t\t\t  runSimulation={runSimulation}\n\t\t\t\t\t\t  clearGrid={clearGrid}\n\t\t\t\t\t\t  setGrid={setGrid}\n\t\t\t\t\t\t  running={running}\n\t\t\t\t\t\t  setRunning={setRunning}\n\t\t\t\t\t\t  runningRef={runningRef}\n\t\t\t\t\t\t  numRows={numRows}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"grid-card\">\n\t\t\t\t\t\t<div className=\"settings\">\n\t\t\t\t\t\t\t<h3>Generation: {generation}</h3>\n\t\t\t\t\t\t\t<h3>Speed: {(1/(speed/1000)).toFixed(1)} gen/sec</h3>\n\t\t\t\t\t\t\t<h3>Grid Size: {numRows} x {numRows}</h3>\n          \t\t\t\t</div>\n\t\t\t\t\t\t<Grid \n\t\t\t\t\t\t\tgrid={grid} \n\t\t\t\t\t  \t\tsetGrid={setGrid} \n\t\t\t\t\t  \t\trunning={running} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<GameControls\n\t\t\t\t\t\trunning={running}\n\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\tsetNumRows={setNumRows}\n\t\t\t\t\t\tgeneration={generation}\n\t\t\t\t\t\tsetGeneration={setGeneration}\n\t\t\t\t\t\tspeed={speed}\n\t\t\t\t\t\tsetSpeed={setSpeed}\n\t\t\t\t\t/>\n        \t\t</div>\n\t\t\t\t<div className=\"right-rules-and-presets\">\n\t\t\t\t\t<div className=\"rules-section\">\n\t\t\t\t\t\t<h2>Rules</h2>\n\t\t\t\t\t\t<p>1. Any live cell with 2 or 3 live neighbors survives.</p>\n\t\t\t\t\t\t<p>2. Any dead cell with 3 live neighbors becomes a live cell.</p>\n\t\t\t\t\t\t<p>3. All other live cells die in the next generation. Similarly, all other dead cells remain dead.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"side-by-side\">\n\t\t\t\t\t\t<div className=\"presets-section\">\n\t\t\t\t\t\t\t<h2>Presets</h2>\n\t\t\t\t\t\t\t<p>Click on one of the common configurations below to start the game with a preset. How many generations will it last?</p>\n\t\t\t\t\t\t\t<div className=\"presets-list\">\n\t\t\t\t\t\t\t\t{presets.map(preset => {\n\t\t\t\t\t\t\t\t\treturn <PresetConfigurations\n\t\t\t\t\t\t\t\t\t\tkey={presets.name}\n\t\t\t\t\t\t\t\t\t\t{...preset}\n\t\t\t\t\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\t\t\t\t\tclearGrid={clearGrid}\n\t\t\t\t\t\t\t\t\t\tcreatePresetGrid={createPresetGrid}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"note\">*Please increase grid size to 40x40 for Spaceship.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"create-your-own\">\n\t\t\t\t\t\t\t<h2>Create  your own!</h2>\n\t\t\t\t\t\t\t<p>Click on any cells to activate them, then click the Start! button to watch your creation live or die. Have fun!</p>\n\t\t\t\t\t\t\t<img src=\"https://upload.wikimedia.org/wikipedia/commons/1/12/Game_of_life_toad.gif\" alt=\"Game of life toad.gif\"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      \t\t</main>\n    \t</div> //end div for App\n  \t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}