{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations'; // const numRows = 25;\n//const numCols = 25;\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\nconst presets = [{\n  name: \"Toad\",\n  matrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n  startingPoint: 0\n}, {\n  name: \"Glider\",\n  matrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n  startingPoint: [1, 1]\n}, {\n  name: \"Quad Blinker\",\n  matrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n  startingPoint: 0\n}]; //generate initial empty grid with equal number of rows/columns\n\nconst generateEmptyGrid = numRows => {\n  const rows = []; //array of rows\n\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n\n    for (let k = 0; k < numRows; k++) {\n      row.push(0); //row of zeros\n    }\n\n    rows.push(row); //add initialized rows onto rows array\n    //0 means dead, 1 means alive\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [numRows, setNumRows] = useState(25);\n  const [grid, setGrid] = useState(generateEmptyGrid(numRows));\n  const [generation, setGeneration] = useState(0);\n  const [speed, setSpeed] = useState(100);\n  const [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n  //this will allow 'running' to continue and not change its value unless until intended\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const speedRef = useRef(speed);\n  speedRef.current = speed;\n  console.log(grid);\n  useEffect(() => {\n    setGrid(generateEmptyGrid(numRows));\n  }, [numRows]);\n  useEffect(() => {\n    speedRef.current = speed;\n  }, [speed]);\n\n  const clearGrid = () => {\n    setGrid(generateEmptyGrid(numRows));\n    setGeneration(0);\n  };\n\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    // simulate\n\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numRows; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newRow = i + x;\n              const newCol = k + y; // check the bounds to make sure it can't go farther than the grid boundaries\n\n              if (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n                neighbors += g[newRow][newCol];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(g => g + 1); //counts the generations\n\n    setTimeout(runSimulation, speedRef.current); //setTimeout for seconds between iterations\n  }, []);\n\n  const createPresetGrid = (matrix, startingPoint) => {\n    let row;\n    let col;\n\n    if (!startingPoint) {\n      const mid = Math.floor(numRows / 2);\n      row = mid;\n      col = mid;\n    } else {\n      row = startingPoint[0];\n      col = startingPoint[1];\n    }\n\n    clearGrid();\n    setGrid(g => produce(g, presetGrid => {\n      matrix.forEach(([x, y]) => {\n        const newRow = row + x;\n        const newCol = col + y;\n        presetGrid[newRow][newCol] = 1;\n      });\n      return presetGrid;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-and-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Generation: \", generation), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, \"Speed: \", speed), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, \"Grid Size: \", numRows, \" x \", numRows)), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    running: running,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GameControls, {\n    setGrid: setGrid,\n    runSimulation: runSimulation,\n    clearGrid: clearGrid,\n    running: running,\n    setRunning: setRunning,\n    runningRef: runningRef,\n    numRows: numRows,\n    setNumRows: setNumRows,\n    generation: generation,\n    setGeneration: setGeneration,\n    speed: speed,\n    setSpeed: setSpeed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Presets\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, presets.map(preset => {\n    return /*#__PURE__*/React.createElement(PresetConfigurations, Object.assign({\n      key: presets.name\n    }, preset, {\n      numRows: numRows,\n      clearGrid: clearGrid,\n      createPresetGrid: createPresetGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 22\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, \"Rules\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, \"Any live cell with two or three live neighbors survives.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, \"Any dead cell with three live neighbors becomes a live cell.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, \"All other live cells die in the next generation. Similarly, all other dead cells remain dead.\"))) //end div for App\n  ;\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js"],"names":["React","useState","useEffect","useCallback","useRef","produce","Grid","GameControls","PresetConfigurations","operations","presets","name","matrix","startingPoint","generateEmptyGrid","numRows","rows","i","row","k","push","App","setNumRows","grid","setGrid","generation","setGeneration","speed","setSpeed","running","setRunning","runningRef","current","speedRef","console","log","clearGrid","runSimulation","g","gridCopy","neighbors","forEach","x","y","newRow","newCol","setTimeout","createPresetGrid","col","mid","Math","floor","presetGrid","map","preset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport PresetConfigurations from './PresetConfigurations';\n\n// const numRows = 25;\n//const numCols = 25;\n\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\n\nconst presets = [\n  {\n    name: \"Toad\",\n    matrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n    startingPoint: 0\n  },\n  {\n    name: \"Glider\",\n    matrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n    startingPoint: [1, 1]\n  },\n  {\n    name: \"Quad Blinker\",\n    matrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n    startingPoint: 0\n  },\n];\n\n//generate initial empty grid with equal number of rows/columns\nconst generateEmptyGrid = numRows => {\n\tconst rows = []; //array of rows\n\tfor (let i = 0; i < numRows; i++) {\n\t\tconst row = [];\n\t\tfor (let k = 0; k < numRows; k++) {\n      \t\trow.push(0) //row of zeros\n    \t}\n    \trows.push(row); //add initialized rows onto rows array\n    \t//0 means dead, 1 means alive\n  \t}\n\n  \treturn rows;\n};\n\nfunction App() {\n\tconst [numRows, setNumRows] = useState(25);\n\tconst [grid, setGrid] = useState(generateEmptyGrid(numRows));\n\tconst [generation, setGeneration] = useState(0);\n\tconst [speed, setSpeed] = useState(100);\n\tconst [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n\n\t//this will allow 'running' to continue and not change its value unless until intended\n\tconst runningRef = useRef(running);\n\trunningRef.current = running\n\n\tconst speedRef = useRef(speed);\n\tspeedRef.current = speed;\n\n\tconsole.log(grid);\n\n\tuseEffect(() => {\n\t\tsetGrid(generateEmptyGrid(numRows))\n\t}, [numRows])\n\n  \tuseEffect(() => {\n    \tspeedRef.current = speed;\n  \t}, [speed])\n\n  \tconst clearGrid = () => {\n    \tsetGrid(generateEmptyGrid(numRows))\n    \tsetGeneration(0)\n  \t}\n\n\n  \tconst runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    \tif (!runningRef.current) {\n      \treturn;\n    \t}\n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n\n    // simulate\n    setGrid(g => {\n\t\treturn produce(g, gridCopy => {\n        \tfor (let i = 0; i < numRows; i++) {\n        \t\tfor (let k = 0; k < numRows; k++) {\n\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\toperations.forEach(([x, y]) => {\n            \t\t\tconst newRow = i + x;\n            \t\t\tconst newCol = k + y;\n              \t\t\t// check the bounds to make sure it can't go farther than the grid boundaries\n              \t\tif (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n                \t\tneighbors += g[newRow][newCol];\n              \t\t}\n        \t\t});\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setGeneration(g => g + 1); //counts the generations\n    setTimeout(runSimulation, speedRef.current);  //setTimeout for seconds between iterations\n  }, []);\n\n  const createPresetGrid = (matrix, startingPoint) => {\n    let row;\n    let col;\n    if (!startingPoint) {\n      const mid = Math.floor(numRows / 2);\n      row = mid;\n      col = mid;\n    }\n    else {\n      row = startingPoint[0];\n      col = startingPoint[1];\n    }\n\n    clearGrid();\n\n    setGrid(g => produce(g, presetGrid => {\n      matrix.forEach(([x, y]) => {\n        const newRow = row + x;\n        const newCol = col + y;\n        presetGrid[newRow][newCol] = 1;\n      })\n\n      return presetGrid;\n    }));\n  }\n\n  return (\n\t<div className=\"App\">\n    \t<header className=\"App-header\">\n    \t\t<h1>John Conway's Game of Life</h1>\n      </header>\n      <main>\n        <div className=\"grid-and-controls\">\n          <div className=\"settings\">\n            <h2>Generation: {generation}</h2>\n            <h2>Speed: {speed}</h2>\n            <h2>Grid Size: {numRows} x {numRows}</h2>\n          </div>\n          <Grid grid={grid} setGrid={setGrid} running={running} />\n\n          <GameControls\n            setGrid={setGrid}\n            runSimulation={runSimulation}\n            clearGrid={clearGrid}\n            running={running}\n            setRunning={setRunning}\n            runningRef={runningRef}\n            numRows={numRows}\n            setNumRows={setNumRows}\n            generation={generation}\n            setGeneration={setGeneration}\n            speed={speed}\n            setSpeed={setSpeed}\n          />\n        </div>\n        <div>\n          <h2>Presets</h2>\n          <div className=\"presets-list\">\n            {presets.map(preset => {\n              return <PresetConfigurations\n                key={presets.name}\n                {...preset}\n                numRows={numRows}\n                clearGrid={clearGrid}\n                createPresetGrid={createPresetGrid}\n              />\n            })}\n          </div>\n        </div>\n\n\n        <h2>Rules</h2>\n        <p>Any live cell with two or three live neighbors survives.</p>\n        <p>Any dead cell with three live neighbors becomes a live cell.</p>\n        <p>All other live cells die in the next generation. Similarly, all other dead cells remain dead.</p>\n      </main>\n    </div> //end div for App\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}