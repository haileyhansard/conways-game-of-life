{"ast":null,"code":"var _jsxFileName = \"/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport MainButtons from './MainButtons';\nimport PresetConfigurations from './PresetConfigurations'; //these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n//each operation represents a cell location \n\nconst operations = [[-1, 0], [-1, 1], [-1, -1], [0, 1], [0, -1], [1, 1], [1, 0], [1, -1]];\nconst presets = [{\n  name: \"Toad\",\n  matrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n  startingPoint: 0\n}, {\n  name: \"Glider\",\n  matrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n  startingPoint: [1, 1]\n}, {\n  name: \"Quad Blinker\",\n  matrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n  startingPoint: 0\n}, {\n  name: \"Spaceship\",\n  matrix: [[-1, 0], [-2, -1], [-2, -2], [-1, -2], [0, -2], [-3, -8], [-4, -8], [-4, -9], [-3, -10], [-2, -10], [-2, -9]],\n  // ,\n  // [-3, -17],[-3, -18],[-4, -17],[-4, -18],[],[],\n  // [],[],[],[],[],[],\n  // [],[],[],[],[],[],\n  // [],[],[],[],[]],\n  startingPoint: 0\n}]; //generate initial empty grid with equal number of rows/columns\n\nconst generateEmptyGrid = numRows => {\n  const rows = []; //array of rows\n\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n\n    for (let k = 0; k < numRows; k++) {\n      row.push(0); //row of zeros\n    }\n\n    rows.push(row); //add initialized rows onto rows array\n    //0 means dead, 1 means alive\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [numRows, setNumRows] = useState(25);\n  const [grid, setGrid] = useState(generateEmptyGrid(numRows));\n  const [generation, setGeneration] = useState(0);\n  const [speed, setSpeed] = useState(1000);\n  const [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n  //this will allow 'running' to continue and not change its value unless intended\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const speedRef = useRef(speed);\n  speedRef.current = speed;\n  console.log(grid);\n  useEffect(() => {\n    setGrid(generateEmptyGrid(numRows));\n  }, [numRows]);\n  useEffect(() => {\n    speedRef.current = speed;\n  }, [speed]);\n\n  const clearGrid = () => {\n    setGrid(generateEmptyGrid(numRows));\n    setGeneration(0);\n    setRunning(false);\n    setSpeed(1000);\n  }; //function that checks the position of the neighboring cells to determine how many neighbors surround a live cell, using npm package immer with keyword 'produce' to give us access to current grid and a new copy of the grid that is being changed.\n\n\n  const checkNeighbors = useCallback(g => {\n    return produce(g, gridCopy => {\n      for (let i = 0; i < numRows; i++) {\n        for (let k = 0; k < numRows; k++) {\n          let neighbors = 0;\n          operations.forEach(([x, y]) => {\n            const newRow = i + x;\n            const newCol = k + y; // check the bounds to make sure it can't go farther than the grid boundaries\n\n            if (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n              neighbors += g[newRow][newCol];\n            }\n          });\n\n          if (neighbors < 2 || neighbors > 3) {\n            gridCopy[i][k] = 0;\n          } else if (g[i][k] === 0 && neighbors === 3) {\n            gridCopy[i][k] = 1;\n          }\n        }\n      }\n    });\n  }, [numRows]);\n  const runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    if (!runningRef.current) {\n      return;\n    } //whenever ^^ this is false, it will die, our kill condition for the recursive function\n    // simulate the game by checking the neighboring cells\n\n\n    setGrid(checkNeighbors);\n    setGeneration(g => g + 1); //counts the generations\n\n    setTimeout(runSimulation, speedRef.current); //setTimeout for seconds between iterations\n  }, [checkNeighbors]);\n\n  const createPresetGrid = (matrix, startingPoint) => {\n    let row;\n    let col;\n\n    if (!startingPoint) {\n      const mid = Math.floor(numRows / 2);\n      row = mid;\n      col = mid;\n    } else {\n      row = startingPoint[0];\n      col = startingPoint[1];\n    }\n\n    clearGrid();\n    setGrid(g => produce(g, presetGrid => {\n      matrix.forEach(([x, y]) => {\n        const newRow = row + x;\n        const newCol = col + y;\n        presetGrid[newRow][newCol] = 1;\n      });\n      return presetGrid;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 8\n    }\n  }, \"John Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-grid-and-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MainButtons, {\n    runSimulation: runSimulation,\n    clearGrid: clearGrid,\n    setGrid: setGrid,\n    running: running,\n    setRunning: setRunning,\n    runningRef: runningRef,\n    numRows: numRows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 8\n    }\n  }, \"Generation: \", generation), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 8\n    }\n  }, \"Speed: \", (1 / (speed / 1000)).toFixed(1), \" gen/sec\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 8\n    }\n  }, \"Grid Size: \", numRows, \" x \", numRows)), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    running: running,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(GameControls, {\n    running: running,\n    numRows: numRows,\n    setNumRows: setNumRows,\n    generation: generation,\n    setGeneration: setGeneration,\n    speed: speed,\n    setSpeed: setSpeed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-rules-and-presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rules-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, \"Rules\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, \"1. Any live cell with 2 or 3 live neighbors survives.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, \"2. Any dead cell with 3 live neighbors becomes a live cell.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, \"3. All other live cells die in the next generation. Similarly, all other dead cells remain dead.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"side-by-side\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 8\n    }\n  }, \"Presets\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 8\n    }\n  }, \"Click on one of the common configurations below to start the game with a preset. How many generations will it last?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 8\n    }\n  }, presets.map(preset => {\n    return /*#__PURE__*/React.createElement(PresetConfigurations, Object.assign({\n      key: presets.name\n    }, preset, {\n      numRows: numRows,\n      clearGrid: clearGrid,\n      createPresetGrid: createPresetGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-your-own\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 8\n    }\n  }, \"Create  your own!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 8\n    }\n  }, \"Click on any cells to activate them, then click the Start! button to watch your creation live or die. Have fun!\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://upload.wikimedia.org/wikipedia/commons/1/12/Game_of_life_toad.gif\",\n    alt: \"Game of life toad.gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 8\n    }\n  })))))) //end div for App\n  ;\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/haileyhansard/Dropbox/LAMBDA SCHOOL/LambdaWork/CS/Week4BuildWeek/conways-game-of-life/game-of-life/src/Components/App.js"],"names":["React","useState","useEffect","useCallback","useRef","produce","Grid","GameControls","MainButtons","PresetConfigurations","operations","presets","name","matrix","startingPoint","generateEmptyGrid","numRows","rows","i","row","k","push","App","setNumRows","grid","setGrid","generation","setGeneration","speed","setSpeed","running","setRunning","runningRef","current","speedRef","console","log","clearGrid","checkNeighbors","g","gridCopy","neighbors","forEach","x","y","newRow","newCol","runSimulation","setTimeout","createPresetGrid","col","mid","Math","floor","presetGrid","toFixed","map","preset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nimport Grid from './Grid';\nimport GameControls from './GameControls';\nimport MainButtons from './MainButtons';\nimport PresetConfigurations from './PresetConfigurations';\n\n//these 8 operations represent the movements of the neighbors. subtract 1 to go up a row, increase the row value to go down one.\n//each operation represents a cell location \nconst operations = [\n\t[-1, 0],\n\t[-1, 1],\n\t[-1, -1],\n\t[0, 1],\n\t[0, -1],\n\t[1, 1],\n\t[1, 0],\n\t[1, -1],\n];\n\nconst presets = [\n\t{\n\t\tname: \"Toad\",\n\t\tmatrix: [[0, 0], [1, -1], [1, 0], [0, 1], [0, 2], [1, 1]],\n\t\tstartingPoint: 0,\n  \t},\n\t{\n\t\tname: \"Glider\",\n\t\tmatrix: [[1, 0], [1, -1], [1, 1], [0, 1], [-1, 0]],\n\t\tstartingPoint: [1, 1],\n\t},\n\t{\n\t\tname: \"Quad Blinker\",\n\t\tmatrix: [[0, 0], [-1, 0], [0, -1], [0, 1], [1, 0]],\n\t\tstartingPoint: 0,\n\t},\n\t{\n\t\tname: \"Spaceship\",\n\t\tmatrix: [[-1, 0],[-2, -1],[-2, -2],[-1, -2],[0, -2],\n\t\t[-3, -8],[-4, -8],[-4, -9],[-3, -10],[-2, -10],[-2, -9]],\n\t\t// ,\n\t\t// [-3, -17],[-3, -18],[-4, -17],[-4, -18],[],[],\n\t\t// [],[],[],[],[],[],\n\t\t// [],[],[],[],[],[],\n\t\t// [],[],[],[],[]],\n\t\tstartingPoint: 0,\n\t}\n];\n\n//generate initial empty grid with equal number of rows/columns\nconst generateEmptyGrid = numRows => {\n\tconst rows = []; //array of rows\n\tfor (let i = 0; i < numRows; i++) {\n\t\tconst row = [];\n\t\tfor (let k = 0; k < numRows; k++) {\n      \t\trow.push(0) //row of zeros\n    \t}\n    \trows.push(row); //add initialized rows onto rows array\n    \t//0 means dead, 1 means alive\n  \t}\n\n  \treturn rows;\n};\n\nfunction App() {\n\tconst [numRows, setNumRows] = useState(25);\n\tconst [grid, setGrid] = useState(generateEmptyGrid(numRows));\n\tconst [generation, setGeneration] = useState(0);\n\tconst [speed, setSpeed] = useState(1000);\n\tconst [running, setRunning] = useState(false); //when button is clicked, running the simulation is toggled on and off\n\n\t//this will allow 'running' to continue and not change its value unless intended\n\tconst runningRef = useRef(running);\n\trunningRef.current = running\n\n\tconst speedRef = useRef(speed);\n\tspeedRef.current = speed;\n\n\tconsole.log(grid);\n\n\tuseEffect(() => {\n\t\tsetGrid(generateEmptyGrid(numRows))\n\t}, [numRows])\n\n  \tuseEffect(() => {\n    \tspeedRef.current = speed;\n  \t}, [speed])\n\n  \tconst clearGrid = () => {\n    \tsetGrid(generateEmptyGrid(numRows));\n\t\tsetGeneration(0);\n\t\tsetRunning(false);\n\t\tsetSpeed(1000);\n  \t}\n\t\n\t  //function that checks the position of the neighboring cells to determine how many neighbors surround a live cell, using npm package immer with keyword 'produce' to give us access to current grid and a new copy of the grid that is being changed.\n\tconst checkNeighbors = useCallback(g => {\n\t\treturn produce(g, gridCopy => {\n        \tfor (let i = 0; i < numRows; i++) {\n        \t\tfor (let k = 0; k < numRows; k++) {\n\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\toperations.forEach(([x, y]) => {\n        \t\t\t\tconst newRow = i + x;\n        \t\t\t\tconst newCol = k + y;\n          \t\t\t\t// check the bounds to make sure it can't go farther than the grid boundaries\n          \t\t\t\tif (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numRows) {\n            \t\t\t\tneighbors += g[newRow][newCol];\n          \t\t\t\t}\n        \t\t\t});\n\n        \t\t\tif (neighbors < 2 || neighbors > 3) {\n          \t\t\t\tgridCopy[i][k] = 0;\n        \t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n          \t\t\t\tgridCopy[i][k] = 1;\n        \t\t\t}\n        \t\t}\n        \t}\n      \t});\n\t}, [numRows])\n\t\n\n  \tconst runSimulation = useCallback(() => {\n    // see if not currently running, then return\n    \tif (!runningRef.current) {\n      \treturn;\n    \t}\n    //whenever ^^ this is false, it will die, our kill condition for the recursive function\n\n    // simulate the game by checking the neighboring cells\n\t\tsetGrid(checkNeighbors);\n\n\t\tsetGeneration(g => g + 1); //counts the generations\n    \tsetTimeout(runSimulation, speedRef.current);  //setTimeout for seconds between iterations\n  \t}, [checkNeighbors]);\n\n\tconst createPresetGrid = (matrix, startingPoint) => {\n    \tlet row;\n    \tlet col;\n    \tif (!startingPoint) {\n      \t\tconst mid = Math.floor(numRows / 2);\n      \t\trow = mid;\n      \t\tcol = mid;\n    \t} else {\n      \t\trow = startingPoint[0];\n      \t\tcol = startingPoint[1];\n    \t}\n    \tclearGrid();\n\t\tsetGrid(g => produce(g, presetGrid => {\n      \t\tmatrix.forEach(([x, y]) => {\n        \t\tconst newRow = row + x;\n        \t\tconst newCol = col + y;\n        \t\tpresetGrid[newRow][newCol] = 1;\n      \t\t});\n      \t\treturn presetGrid;\n    \t}));\n  \t}\n\n\treturn (\n\t\t<div className=\"App\">\n    \t\t<header className=\"App-header\">\n    \t\t\t<h1>John Conway's Game of Life</h1>\n      \t\t</header>\n      \t\t<main>\n        \t\t<div className=\"left-grid-and-controls\">\n\t\t\t\t\t<MainButtons \n\t\t\t\t\t\t  runSimulation={runSimulation}\n\t\t\t\t\t\t  clearGrid={clearGrid}\n\t\t\t\t\t\t  setGrid={setGrid}\n\t\t\t\t\t\t  running={running}\n\t\t\t\t\t\t  setRunning={setRunning}\n\t\t\t\t\t\t  runningRef={runningRef}\n\t\t\t\t\t\t  numRows={numRows}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"grid-card\">\n\t\t\t\t\t\t<div className=\"settings\">\n\t\t\t\t\t\t\t<h3>Generation: {generation}</h3>\n\t\t\t\t\t\t\t<h3>Speed: {(1/(speed/1000)).toFixed(1)} gen/sec</h3>\n\t\t\t\t\t\t\t<h3>Grid Size: {numRows} x {numRows}</h3>\n          \t\t\t\t</div>\n\t\t\t\t\t\t<Grid \n\t\t\t\t\t\t\tgrid={grid} \n\t\t\t\t\t  \t\tsetGrid={setGrid} \n\t\t\t\t\t  \t\trunning={running} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<GameControls\n\t\t\t\t\t\trunning={running}\n\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\tsetNumRows={setNumRows}\n\t\t\t\t\t\tgeneration={generation}\n\t\t\t\t\t\tsetGeneration={setGeneration}\n\t\t\t\t\t\tspeed={speed}\n\t\t\t\t\t\tsetSpeed={setSpeed}\n\t\t\t\t\t/>\n        \t\t</div>\n\t\t\t\t<div className=\"right-rules-and-presets\">\n\t\t\t\t\t<div className=\"rules-section\">\n\t\t\t\t\t\t<h2>Rules</h2>\n\t\t\t\t\t\t<p>1. Any live cell with 2 or 3 live neighbors survives.</p>\n\t\t\t\t\t\t<p>2. Any dead cell with 3 live neighbors becomes a live cell.</p>\n\t\t\t\t\t\t<p>3. All other live cells die in the next generation. Similarly, all other dead cells remain dead.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"side-by-side\">\n\t\t\t\t\t\t<div className=\"presets-section\">\n\t\t\t\t\t\t\t<h2>Presets</h2>\n\t\t\t\t\t\t\t<p>Click on one of the common configurations below to start the game with a preset. How many generations will it last?</p>\n\t\t\t\t\t\t\t<div className=\"presets-list\">\n\t\t\t\t\t\t\t\t{presets.map(preset => {\n\t\t\t\t\t\t\t\t\treturn <PresetConfigurations\n\t\t\t\t\t\t\t\t\t\tkey={presets.name}\n\t\t\t\t\t\t\t\t\t\t{...preset}\n\t\t\t\t\t\t\t\t\t\tnumRows={numRows}\n\t\t\t\t\t\t\t\t\t\tclearGrid={clearGrid}\n\t\t\t\t\t\t\t\t\t\tcreatePresetGrid={createPresetGrid}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"create-your-own\">\n\t\t\t\t\t\t\t<h2>Create  your own!</h2>\n\t\t\t\t\t\t\t<p>Click on any cells to activate them, then click the Start! button to watch your creation live or die. Have fun!</p>\n\t\t\t\t\t\t\t<img src=\"https://upload.wikimedia.org/wikipedia/commons/1/12/Game_of_life_toad.gif\" alt=\"Game of life toad.gif\"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      \t\t</main>\n    \t</div> //end div for App\n  \t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}